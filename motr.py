#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from concurrent.futures import ThreadPoolExecutor
import pexpect
import yaml
import re
from re import findall
import textfsm
import sys
import subprocess


def huawei_telnet_int_des(ip: str, login: str, password: str):
    '''
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ telnet –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è Huawei
    –∏ –≤—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–∞—Ö, –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ description
    :param ip:          IP –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    :param login:       –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telnet
    :param password:    –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telnet
    :return:            –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ä—Ç–∞—Ö, –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ description
    '''
    print("---- def huawei_telnet_int_des ----")
    with pexpect.spawn(f"telnet {ip}") as telnet:
        telnet.expect("[Uu]ser")
        telnet.sendline(login)
        print(f"    Login {ip}")
        telnet.expect("[Pp]ass")
        telnet.sendline(password)
        print(f"    Pass {ip}")
        telnet.expect(['>', ']'])
        telnet.sendline("dis int des")
        output = ''
        while True:
            match = telnet.expect(['>', ']', "---- More ----", pexpect.TIMEOUT])
            page = str(telnet.before.decode('utf-8')).replace("[42D", '')
            # page = re.sub(" +\x08+ +\x08+", "\n", page)
            output += page.strip()
            if match == 0:
                print("    got int des")
                telnet.sendline("quit")
                break
            elif match == 1:
                print("    got int des")
                telnet.sendline("quit")
                telnet.sendline("quit")
                break
            elif match == 2:
                telnet.send(" ")
                output += '\n'
            else:
                print("    –û—à–∏–±–∫–∞: timeout")
                break
        telnet.sendline("quit")
        output = re.sub("\n +\n", "\n", output)
        return output


def search_admin_down(current_ring: dict, checking_device_name: str):
    '''
    –ò—â–µ—Ç –µ—Å—Ç—å –ª–∏ —É –¥–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞ —Å–µ—Ç–∏ –ø–æ—Ä—Ç(—ã) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "admin down" –≤ —Å—Ç–æ—Ä–æ–Ω—É –¥—Ä—É–≥–æ–≥–æ —É–∑–ª–∞ —Å–µ—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –∫–æ–ª—å—Ü–∞.
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é –≤ description'–µ –∏–º–µ–Ω–∏ —É–∑–ª–∞ —Å–µ—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª—å—Ü–∞.

    :param current_ring:         –ö–æ–ª—å—Ü–æ
    :param checking_device_name: –ò–º—è —É–∑–ª–∞ —Å–µ—Ç–∏
    :return:    –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –ø–æ—Ä—Ç–æ–º(–º–∏) "admin down" –∏ –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É
                –≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ä—Ç –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ä—Ç–æ–≤ "admin down", —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "False"
    '''
    print("---- def search_admin_down ----")
    if current_ring[checking_device_name]["vendor"] == 'huawei':
        output = huawei_telnet_int_des(current_ring[checking_device_name]["ip"],
                                       current_ring[checking_device_name]["user"],
                                       current_ring[checking_device_name]["pass"])

    with open("/home/irudenko/motr/templates/int_des_admin_down_huawei.template", 'r') as template_file:
        int_des_ = textfsm.TextFSM(template_file)
        result = int_des_.ParseText(output)         # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã "admin down"
        ad_to_this_host = []                        # –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤–µ–¥–µ—Ç –ø–æ—Ä—Ç "admin down"
        ad_interface = []
        if result:                                  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω admin_down, —Ç–æ...
            for dev_name in current_ring_list:              # ...–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —É–∑–ª—ã —Å–µ—Ç–∏ –≤ –∫–æ–ª—å—Ü–µ:
                for res_line in result:                     # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ admin_down:

                    # –ï—Å–ª–∏ –≤ "description" –µ—Å—Ç—å —É–∑–µ–ª —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–∞–Ω–Ω–æ–º—É –∫–æ–ª—å—Ü—É, —Ç–æ...
                    if bool(findall(dev_name, res_line[3])):
                        # ...—ç—Ç–æ —Ö–æ—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–∫—Ä—ã—Ç –ø–æ—Ä—Ç –æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–∞
                        ad_to_this_host.append(dev_name)
                        ad_interface.append(res_line[0])            # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "admin down"
                        # print(checking_device_name, ad_to_this_host, ad_interface)
        if ad_to_this_host and ad_interface:
            return checking_device_name, ad_to_this_host, ad_interface
        else:
            return False


def ring_rotate_type(current_ring_list: list, main_dev: str, neighbour_dev: str):
    '''
    –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–≤—É—Ö —É–∑–ª–æ–≤ —Å–µ—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∏–ø "–ø–æ–≤–æ—Ä–æ—Ç–∞" –∫–æ–ª—å—Ü–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–ø–∏—Å–∞–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ
    "rings.yaml"
        Positive - —Ç–∞–∫ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ \n
        Negative - –æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ \n
    :param current_ring_list: –ö–æ–ª—å—Ü–æ (—Å–ø–∏—Å–æ–∫)
    :param main_dev:        –£–∑–µ–ª —Å–µ—Ç–∏ —Å "admin down"
    :param neighbour_dev:   –£–∑–µ–ª —Å–µ—Ç–∏, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤–µ–¥–µ—Ç –ø–æ—Ä—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "admin down" —É–∑–ª–∞ —Å–µ—Ç–∏ 'main_dev'
    :return: positive, negative, False
    '''
    # print("---- def ring_rotate_type ----")
    main_dev_index = current_ring_list.index(main_dev)
    # print(f"main_dev: {main_dev} | neighbour_dev: {neighbour_dev}")
    if current_ring_list[main_dev_index-1] == neighbour_dev:
        return "positive"
    elif current_ring_list[main_dev_index+1] == neighbour_dev:
        return "negative"
    else:
        return False


def find_ring_by_device(device_name: str):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª—å—Ü–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —É–∑–µ–ª —Å–µ—Ç–∏ \n
    :param device_name: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —É–∑–ª–∞ —Å–µ—Ç–∏
    :return: 1 –ö–æ–ª—å—Ü–æ (dict),
             2 –£–∑–ª—ã —Å–µ—Ç–∏ –≤ –∫–æ–ª—å—Ü–µ (list)
             3 –ò–º—è –∫–æ–ª—å—Ü–∞ (str)
    '''
    print("---- def find_ring_by_device ----")
    with open('/home/irudenko/motr/rings.yaml', 'r') as rings_yaml:      # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        rings = yaml.safe_load(rings_yaml)      # –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ yaml –≤ —Å–ª–æ–≤–∞—Ä—å
        for ring in rings:                      # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–ª—å—Ü–∞
            for device in rings[ring]:              # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–ª—å—Ü–µ%
                if device == device_name:               # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —É–∑–µ–ª —Å–µ—Ç–∏, —Ç–æ...
                    current_ring = rings[ring]              # ...—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –¥–∞–Ω–Ω–æ–µ –∫–æ–ª—å—Ü–æ
                    current_ring_list = []
                    current_ring_name = ring
                    for i in current_ring:
                        current_ring_list.append(i)
                    break
    # pprint(current_ring)
    # print(current_ring_list)
    return current_ring, current_ring_list, str(current_ring_name)


def ring_ping_status(ring: dict):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –∏–∑ —É–∑–ª–æ–≤ —Å–µ—Ç–∏ –≤ –∫–æ–ª—å—Ü–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ "ping" \n
    :param ring: –ö–æ–ª—å—Ü–æ
    :return: –î–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: –∏–º—è —É–∑–ª–∞ –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å "True" - ping —É—Å–ø–µ—à–µ–Ω, "False" - –Ω–µ—Ç
    '''
    status = []
    print("---- def ring_ping_status ----")

    def ping(ip, device):
        result = subprocess.run(['ping', '-c', '3', '-n', ip], stdout=subprocess.DEVNULL)
        if not result.returncode:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: 0 - –¥–æ—Å—Ç—É–ø–µ–Ω, 1 –∏ 2 - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            status.append((device, True))
            print(f"    {device} available: True")
        else:
            status.append((device, False))
            print(f"    {device} available: False")

    with ThreadPoolExecutor(max_workers=10) as executor:    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
        for device in ring:
            executor.submit(ping, ring[device]['ip'], device)   # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω—Ü–∏—é ping –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

    return status


def give_me_interface_name(interface: str):
    '''
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∏–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç–æ–º—É –≤–∏–¥—É \n
    –ù–∞–ø—Ä–∏–º–µ—Ä: Eth0/1 -> Ethernet0/1 \n
    :param interface:   –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—ã—Ä–æ–º –≤–∏–¥–µ (raw)
    :return:            –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç–æ–º –≤–∏–¥–µ
    '''
    interface_number = findall(r"\S(\d+([\/\\]?\d*)*)", interface)
    if bool(findall('^[Ee]', interface)):
        return f"Ethernet{interface_number[0][0]}"
    elif bool(findall('^[Ff]', interface)):
        return f"FastEthernet{interface_number[0][0]}"
    elif bool(findall('^[Gg]', interface)):
        return f"GigabitEthernet{interface_number[0][0]}"


def find_port_by_desc(current_ring: dict, main_name: str, target_name: str):
    '''
    –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å description –∏–º–µ—é—â–∏–º –≤ —Å–µ–±–µ –∏–º—è –¥—Ä—É–≥–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è \n
    :param current_ring: –ö–æ–ª—å—Ü–æ
    :param main_name:   –£–∑–µ–ª —Å–µ—Ç–∏, –≥–¥–µ –∏—â–µ–º
    :param target_name: –£–∑–µ–ª —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ–º
    :return:            –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    '''
    print("---- def find_port_by_desc ----")
    output = ''
    if current_ring[main_name]["vendor"] == 'huawei':
        output = huawei_telnet_int_des(current_ring[main_name]["ip"],
                                       current_ring[main_name]["user"],
                                       current_ring[main_name]["pass"])
    # print(main_name, target_name)
    with open("/home/irudenko/motr/templates/int_des_huawei.template", 'r') as template_file:  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ —à–∞–±–ª–æ–Ω—É
        int_des_ = textfsm.TextFSM(template_file)
        result = int_des_.ParseText(output)
        for line in result:
            if bool(findall(target_name, line[3])):  # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –≤ description —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è "target_name"
                return line[0]    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å


def set_port_status(current_ring: dict, device_name: str, interface_name: str, port_status: str):
    '''
    –ó–∞—Ö–æ–¥–∏–º –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ telnet –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    :param current_ring"    –ö–æ–ª—å—Ü–æ
    :param device_name:     –ò–º—è —É–∑–ª–∞ —Å–µ—Ç–∏, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
    :param interface_name:  –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–∑–ª–∞ —Å–µ—Ç–∏
    :param port_status:     "up": –ø–æ–¥–Ω—è—Ç—å –ø–æ—Ä—Ç, "down": –ø–æ–ª–æ–∂–∏—Ç—å –ø–æ—Ä—Ç
    :return:                –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1, –Ω–µ—É–¥–∞—á–∏ - 0
    '''
    print("---- def set_port_status ----")
    if current_ring[device_name]["vendor"] == 'huawei':
        with pexpect.spawn(f"telnet {current_ring[device_name]['ip']}") as telnet:
            telnet.expect("[Uu]ser")
            telnet.sendline(current_ring[device_name]["user"])
            print(f"    –í—Ö–æ–¥ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_ring[device_name]['user']}")
            telnet.expect("[Pp]ass")
            telnet.sendline(current_ring[device_name]["pass"])
            print(f"    –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è ***")
            plvl = telnet.expect(['>', ']'])
            if plvl == 0:
                telnet.sendline("sys")
                print(f'    <{device_name}>system-view')
            interface_name = give_me_interface_name(interface_name)
            telnet.sendline(f"interface {interface_name}")
            print(f"    [{device_name}]interface {interface_name}")
            telnet.expect(f'-{interface_name}]')
            if port_status == 'down':
                telnet.sendline('sh')
                print(f'    [{device_name}-{interface_name}]shutdown')
            elif port_status == 'up':
                telnet.sendline('undo sh')
                print(f'    [{device_name}-{interface_name}]undo shutdown')
            telnet.expect(f'-{interface_name}]')
            telnet.sendline('quit')
            telnet.expect(']')
            telnet.sendline('quit')
            telnet.expect('>')
            telnet.sendline('save')
            telnet.expect(']')
            print('    configuration saved!')
            telnet.sendline('Y')
            telnet.expect('>')
            telnet.sendline('quit')
            print('    QUIT\n')
            return 1
    return 0


if __name__ == '__main__':

    successor_name = ''
    # dev = 'SVSL-01-MotR-ASW1'
    dev = sys.argv[1]
    current_ring, current_ring_list, current_ring_name = find_ring_by_device(dev)

    with open('/home/irudenko/motr/rotated_rings.yaml', 'r') as rings_yaml:  # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        rotated_rings = yaml.safe_load(rings_yaml)  # –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ yaml –≤ —Å–ª–æ–≤–∞—Ä—å
        if rotated_rings:
            for rring in rotated_rings:
                if current_ring_name == rring:
                    print(f"–ö–æ–ª—å—Ü–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∑–µ–ª —Å–µ—Ç–∏ {dev} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∫–∞–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ"
                          f"(—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª \"rotated_rings.yaml\")")
                    sys.exit()  # –í—ã—Ö–æ–¥

    devices_ping = ring_ping_status(current_ring)

    for _, available in devices_ping:
        if not available:
            break
    else:
        print("–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–ª—å—Ü–µ –¥–æ—Å—Ç—É–ø–Ω—ã, —Ä–∞–∑–≤–æ—Ä–æ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
        sys.exit()

    for device_name, device_status in devices_ping:     # –õ–∏—Å—Ç–∞–µ–º —É–∑–ª—ã —Å–µ—Ç–∏ –∏ –∏—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ "ping"

        print('-'*60+'\n'+'-'*60)

        print(f"device_name: {device_name} | device_status: {device_status}")
        if device_status:                                   # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Ç–æ...
            admin_down = search_admin_down(current_ring, device_name)         # ...–∏—â–µ–º admin down
            if admin_down:                                  # [0] - host name, [1] - side host name, [2] - interface
                print(f"–ù–∞–π–¥–µ–Ω —É–∑–µ–ª —Å–µ—Ç–∏ {admin_down[0]} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ—Ä—Ç–∞ {admin_down[2][0]}: admin down\n"
                      f"–î–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç –≤–µ–¥–µ—Ç –∫ {admin_down[1][0]}")
                occurrence = admin_down[0]                      # ...—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                rotate = ring_rotate_type(current_ring_list, occurrence, str(admin_down[1])[2:-2])  # –¢–∏–ø —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª—å—Ü–∞
                print(f'–†–∞–∑–≤–æ—Ä–æ—Ç –∫–æ–ª—å—Ü–∞: {rotate}')
                if rotate == 'positive':
                    index_factor = -1
                elif rotate == 'negative':
                    index_factor = 1
                else:
                    index_factor = 0

                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤ (—ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª—å—Ü–∞),
                #   —á—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                double_current_ring_list = current_ring_list + current_ring_list
                # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–≤–µ–Ω –∏–Ω–¥–µ–∫—Å—É —Å–æ—Å–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —É–∑–ª—É —Å–µ—Ç–∏, –≥–¥–µ
                #   —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä—ã–≤ –∫–æ–ª—å—Ü–∞ (admin down) –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª—å—Ü–∞
                curr_index = current_ring_list.index(admin_down[0])+index_factor
                iteration = 1
                if index_factor:                    # –ï—Å–ª–∏ –∫–æ–ª—å—Ü–æ –∏–º–µ–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç —Ç–æ...

                    while index_factor:                 # –î–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º "–ø—Ä–µ–µ–º–Ω–∏–∫–∞":

                        '''
                        –ü—Ä–∏ –ª–∏—Å—Ç–∏–Ω–≥–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞!!
                        '''

                        print(f"curr_index: {curr_index} | iteration: {iteration}")

                        for line in devices_ping:           # –õ–∏—Å—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫
                            print(f"    devices_ping: {line} | device: {double_current_ring_list[curr_index]}")

                            if line[0] == double_current_ring_list[curr_index]:
                                print(line[0], line[1])
                                if not line[1]:                     # –ï—Å–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ç–æ...
                                    pass                                # ...–ø—Ä–æ–ø—É—Å–∫
                                else:                               # –ï—Å–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, —Ç–æ...
                                    successor_index = curr_index        # ...–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å "–ø—Ä–µ–µ–º–Ω–∏–∫–∞"
                                    successor_name = double_current_ring_list[successor_index]
                                    index_factor = 0                    # –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Ç–µ—Ä–∞—Ü–∏—è "while"
                                    print("find successor!")
                                    break                               # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ "ping status"

                        curr_index += index_factor  # ...–∏—â–µ–º –¥–∞–ª—å—à–µ
                        iteration += 1
                        if iteration >= len(current_ring_list)+1:
                            break

                if successor_name:       # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞—à–ª–∏ "–ø—Ä–µ–µ–º–Ω–∏–∫–∞"...
                    print(f"–ü—Ä–µ–µ–º–Ω–∏–∫: {successor_name}")

                    # –ö–æ–ª—å—Ü–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∏–º–µ–µ—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–π–¥–µ–Ω "–ø—Ä–µ–µ–º–Ω–∏–∫"
                    # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å admin down –≤ —Å—Ç–æ—Ä–æ–Ω—É "–ø–æ–≤–æ—Ä–æ—Ç–∞" –∫–æ–ª—å—Ü–∞
                    if rotate == 'positive':
                        i = 1
                    else:
                        i = -1

                    successor_intf = find_port_by_desc(current_ring, successor_name,
                                                       current_ring_list[current_ring_list.index(successor_name)+i])

                    print(f'–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç {successor_intf} –Ω–∞ {successor_name}')
                    if set_port_status(current_ring, successor_name, successor_intf, "down"):   # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç –Ω–∞ "–ø—Ä–µ–µ–º–Ω–∏–∫–µ"

                        print(f'–ü–æ–¥–Ω–∏–º–∞–µ–º –ø–æ—Ä—Ç {admin_down[2][0]} –Ω–∞ {admin_down[0]}')
                        if set_port_status(current_ring, admin_down[0], admin_down[2][0], "up"):

                            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–ª—å—Ü–æ –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
                            print("–ö–æ–ª—å—Ü–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ!")
                            ring_to_save = {current_ring_name: {"default_host": admin_down[0],
                                                                "default_port": admin_down[2][0],
                                                                "admin_down_host": successor_name,
                                                                "admin_down_port": successor_intf}}
                            with open('/home/irudenko/motr/rotated_rings.yaml', 'a') as save_ring:
                                yaml.dump(ring_to_save, save_ring, default_flow_style=False)
                break
    else:                                                       # –ï—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ "ping", —Ç–æ...
        print("–í—Å–µ —É–∑–ª—ã —Å–µ—Ç–∏ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª—å—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")        # ...–∫–æ–Ω–µ—Ü –∫–æ–ª—å—Ü–∞

