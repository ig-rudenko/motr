
import pexpect
from main.logs import lprint         # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
import re
from re import findall
import textfsm
import subprocess
from concurrent.futures import ThreadPoolExecutor   # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
import os
import sys

root_dir = os.path.join(os.getcwd(), os.path.split(sys.argv[0])[0])


def interfaces(current_ring: dict, checking_device_name: str, enable_print: bool = True):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –ø–æ telnet –∏ —Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∏—Ö —Å—Ç–∞—Ç—É—Å—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∏–ø –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è \n
    :param current_ring:            –ö–æ–ª—å—Ü–æ
    :param checking_device_name:    –ò–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    :param enable_print:            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–∫–ª—é—á–µ–Ω
    :return:                        –°–ø–∏—Å–æ–∫: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Å—Ç–∞—Ç—É—Å, –æ–ø–∏—Å–∞–Ω–∏–µ; False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    with pexpect.spawn(f"telnet {current_ring[checking_device_name]['ip']}") as telnet:
        try:
            if telnet.expect(["[Uu]ser", 'Unable to connect']):
                if enable_print:
                    lprint("    \033[31mTelnet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\033[0m")
                return False
            telnet.sendline(current_ring[checking_device_name]["user"])
            if enable_print:
                lprint(f"    –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {checking_device_name} ({current_ring[checking_device_name]['ip']})")
            telnet.expect("[Pp]ass")
            telnet.sendline(current_ring[checking_device_name]["pass"])
            match = telnet.expect([']', '>', '#', 'Failed to send authen-req'])
            if match == 3:
                if enable_print:
                    lprint('    \033[31m–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!\033[0m')
                return False
            else:
                telnet.sendline('show version')
                version = ''
                while True:
                    m = telnet.expect([r']$', '-More-', r'>$', r'#'])
                    version += str(telnet.before.decode('utf-8'))
                    if m == 1:
                        telnet.sendline(' ')
                    else:
                        break
                # ZTE
                if bool(findall(r' ZTE Corporation:', version)):
                    if enable_print:
                        lprint("    –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ZTE")

                # Huawei
                elif bool(findall(r'Unrecognized command', version)):
                    if enable_print:
                        lprint("    –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: Huawei")
                    telnet.sendline("dis int des")
                    output = ''
                    num = ''
                    while True:
                        match = telnet.expect(['Too many parameters', ']', "  ---- More ----",
                                               "Unrecognized command", ">", pexpect.TIMEOUT])
                        output += str(telnet.before.decode('utf-8')).replace("[42D", '').strip()
                        # page = re.sub(" +\x08+ +\x08+", "\n", page)
                        if match == 4:
                            telnet.sendline("quit")
                            break
                        elif match == 1:
                            telnet.sendline("quit")
                            telnet.sendline("quit")
                            break
                        elif match == 2:
                            telnet.send(" ")
                            output += '\n'
                        elif match == 0 or match == 3:
                            telnet.expect('>')
                            telnet.sendline('super')
                            telnet.expect(':')
                            telnet.sendline('sevaccess')
                            telnet.expect('>')
                            telnet.sendline('dis brief int')
                            num = '2'
                            output = ''
                        else:
                            if enable_print:
                                lprint("    –û—à–∏–±–∫–∞: timeout")
                            break
                    telnet.sendline("quit")
                    output = re.sub("\n +\n", "\n", output)
                    with open(f'{root_dir}/templates/int_des_huawei{num}.template', 'r') as template_file:
                        int_des_ = textfsm.TextFSM(template_file)
                        result = int_des_.ParseText(output)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                    return result

                # Cisco
                elif bool(findall(r'Cisco IOS', version)):
                    if enable_print:
                        lprint("    –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: Cisco")
                    if match == 1:
                        telnet.sendline('enable')
                        telnet.expect('[Pp]ass')
                        telnet.sendline('sevaccess')
                    telnet.expect('#')
                    telnet.sendline("sh int des")
                    output = ''
                    while True:
                        match = telnet.expect([r'#$', "--More--", pexpect.TIMEOUT])
                        page = str(telnet.before.decode('utf-8')).replace("[42D", '').replace(
                            "        ", '')
                        # page = re.sub(" +\x08+ +\x08+", "\n", page)
                        output += page.strip()
                        if match == 0:
                            telnet.sendline("exit")
                            break
                        elif match == 1:
                            telnet.send(" ")
                            output += '\n'
                        else:
                            if enable_print:
                                lprint("    –û—à–∏–±–∫–∞: timeout")
                            break
                    output = re.sub("\n +\n", "\n", output)
                    with open(f'{root_dir}/templates/int_des_cisco.template', 'r') as template_file:
                        int_des_ = textfsm.TextFSM(template_file)
                        result = int_des_.ParseText(output)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                    return result

                # D-Link
                elif bool(findall(r'Next possible completions:', version)):
                    if enable_print:
                        lprint("    –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: D-Link")
                    telnet.sendline('enable admin')
                    if telnet.expect(["#", "[Pp]ass"]):
                        telnet.sendline('sevaccess')
                        telnet.expect('#')
                    telnet.sendline('disable clipaging')
                    telnet.expect('#')
                    telnet.sendline("show ports des")
                    telnet.expect('#')
                    output = telnet.before.decode('utf-8')
                    telnet.sendline('logout')
                    with open(f'{root_dir}/templates/int_des_d-link.template', 'r') as template_file:
                        int_des_ = textfsm.TextFSM(template_file)
                        result = int_des_.ParseText(output)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                    return result

                # Alcatel, Linksys
                elif bool(findall(r'SW version', version)):
                    if enable_print:
                        lprint("    –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: Alcatel or Linksys")
                    telnet.sendline('show interfaces configuration')
                    port_state = ''
                    while True:
                        match = telnet.expect(['More: <space>', '#', pexpect.TIMEOUT])
                        page = str(telnet.before.decode('utf-8'))
                        port_state += page.strip()
                        if match == 0:
                            telnet.sendline(' ')
                        elif match == 1:
                            break
                        else:
                            if enable_print:
                                lprint("    –û—à–∏–±–∫–∞: timeout")
                            break
                    with open(f'{root_dir}/templates/int_des_alcatel_linksys.template', 'r') as template_file:
                        int_des_ = textfsm.TextFSM(template_file)
                        result_port_state = int_des_.ParseText(port_state)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                    telnet.sendline('show int des')
                    telnet.expect('#')
                    port_desc = ''
                    while True:
                        match = telnet.expect(['More: <space>', '#', pexpect.TIMEOUT])
                        page = str(telnet.before.decode('utf-8'))
                        port_desc += page.strip()
                        if match == 0:
                            telnet.sendline(' ')
                        elif match == 1:
                            telnet.sendline('exit')
                            break
                        else:
                            if enable_print:
                                lprint("    –û—à–∏–±–∫–∞: timeout")
                            break
                    with open(f'{root_dir}/templates/int_des_alcatel_linksys2.template', 'r') as template_file:
                        int_des_ = textfsm.TextFSM(template_file)
                        result_port_des = int_des_.ParseText(port_desc)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                    result = []
                    for line in result_port_state:
                        for line2 in result_port_des:
                            if line[0] == line2[0]:
                                result.append([line[0], line[1], line2[1]])
                    return result

                # Edge-Core
                elif bool(findall(r'Hardware version', version)):
                    if enable_print:
                        lprint("    –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: Edge-Core")
                    telnet.sendline('show running-config')
                    output = ''
                    while True:
                        match = telnet.expect(['---More---', '#', pexpect.TIMEOUT])
                        page = str(telnet.before.decode('utf-8'))
                        output += page.strip()
                        if match == 0:
                            telnet.sendline(' ')
                        elif match == 1:
                            break
                        else:
                            if enable_print:
                                lprint("    –û—à–∏–±–∫–∞: timeout")
                            break
                    result = []
                    intf_raw = findall(r'(interface (.+\n)+?!)', str(output))
                    for x in intf_raw:
                        result.append([findall(r'interface (\S*\s*\S*\d)', str(x))[0],
                                       'admin down' if 'shutdown' in str(x) else 'up',
                                       findall(r'description (\S+)', str(x))[0] if len(
                                           findall(r'description (\S+)', str(x))) > 0 else ''])
                    return result

                # Zyxel
                elif bool(findall(r'ZyNOS', version)):
                    if enable_print:
                        lprint("    –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: Zyxel")

                # Eltex
                elif bool(findall(r'Active-image: ', version)):
                    if enable_print:
                        lprint("    Eltex")
                    telnet.sendline("sh int des")
                    output = ''
                    while True:
                        match = telnet.expect([r'#$', "More: <space>", pexpect.TIMEOUT])
                        page = str(telnet.before.decode('utf-8')).replace("[42D", '').replace(
                            "        ", '')
                        # page = re.sub(" +\x08+ +\x08+", "\n", page)
                        output += page.strip()
                        if match == 0:
                            telnet.sendline("exit")
                            break
                        elif match == 1:
                            telnet.send(" ")
                            # output += '\n'
                        else:
                            if enable_print:
                                lprint("    –û—à–∏–±–∫–∞: timeout")
                            break
                    output = re.sub("\n +\n", "\n", output)
                    with open(f'{root_dir}/templates/int_des_eltex.template', 'r') as template_file:
                        int_des_ = textfsm.TextFSM(template_file)
                        result = int_des_.ParseText(output)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                    return result

                telnet.sendline('exit')

        except pexpect.exceptions.TIMEOUT:
            if enable_print:
                lprint("    \033[31m–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ! (timeout)\033[0m")


def search_admin_down(ring: dict, ring_list: list, checking_device_name: str, enable_print=True):
    """
    –ò—â–µ—Ç –µ—Å—Ç—å –ª–∏ —É –¥–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞ —Å–µ—Ç–∏ –ø–æ—Ä—Ç(—ã) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "admin down" –≤ —Å—Ç–æ—Ä–æ–Ω—É –¥—Ä—É–≥–æ–≥–æ —É–∑–ª–∞ —Å–µ—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –∫–æ–ª—å—Ü–∞.
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é –≤ description'–µ –∏–º–µ–Ω–∏ —É–∑–ª–∞ —Å–µ—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª—å—Ü–∞.

    :param ring:                    –ö–æ–ª—å—Ü–æ
    :param ring_list:               –°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ —Å–µ—Ç–∏ –≤ –∫–æ–ª—å—Ü–µ
    :param checking_device_name:    –ò–º—è —É–∑–ª–∞ —Å–µ—Ç–∏
    :param enable_print:            –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    :return:    –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –ø–æ—Ä—Ç–æ–º(–º–∏) "admin down" –∏ –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É
                –≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ä—Ç –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ä—Ç–æ–≤ "admin down", —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "False"
    """
    if enable_print:
        lprint("---- def search_admin_down ----")

    result = interfaces(ring, checking_device_name, enable_print=enable_print)
    ad_to_this_host = []  # –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤–µ–¥–µ—Ç –ø–æ—Ä—Ç "admin down"
    ad_interface = []
    # lprint(result)
    if result:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω admin_down, —Ç–æ...
        for dev_name in ring_list:  # ...–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —É–∑–ª—ã —Å–µ—Ç–∏ –≤ –∫–æ–ª—å—Ü–µ:
            for res_line in result:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:
                if bool(findall(dev_name, res_line[2])) and (
                        bool(findall(r'(admin down|\*down|Down|Disabled|ADM DOWN)', res_line[1]))
                ):
                    # ...—ç—Ç–æ —Ö–æ—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –∑–∞–∫—Ä—ã—Ç –ø–æ—Ä—Ç –æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–∞
                    ad_to_this_host.append(dev_name)
                    ad_interface.append(res_line[0])  # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "admin down"
                    # lprint(checking_device_name, ad_to_this_host, ad_interface)
    if ad_to_this_host and ad_interface:
        return {"device": checking_device_name, "next_device": ad_to_this_host, "interface": ad_interface}
    else:
        return False


def interface_normal_view(interface) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∏–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –≤–∏–¥—É –ø—Ä–∏–Ω—è—Ç–æ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–æ–≤\n
    –ù–∞–ø—Ä–∏–º–µ—Ä: Eth 0/1 -> Ethernet0/1
              GE1/0/12 -> GigabitEthernet1/0/12\n
    :param interface:   –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—ã—Ä–æ–º –≤–∏–¥–µ (raw)
    :return:            –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç–æ–º –≤–∏–¥–µ
    """
    interface = str(interface)
    interface_number = findall(r'(\d+([/\\]?\d*)*)', str(interface))
    if bool(findall('^[Ee]', interface)):
        return f"Ethernet{interface_number[0][0]}"
    elif bool(findall('^[Ff]', interface)):
        return f"FastEthernet{interface_number[0][0]}"
    elif bool(findall('^[Gg]', interface)):
        return f"GigabitEthernet{interface_number[0][0]}"
    elif bool(findall('^\d+', interface)):
        return findall('^\d+', interface)[0]
    elif bool(findall('^[Tt]', interface)):
        return f'TengigabitEthernet{interface_number[0][0]}'
    else:
        return interface


def set_port_status(current_ring: dict, device: str, interface: str, status: str):
    """
    –ó–∞—Ö–æ–¥–∏–º –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ telnet –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    :param current_ring"    –ö–æ–ª—å—Ü–æ
    :param device:          –ò–º—è —É–∑–ª–∞ —Å–µ—Ç–∏, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
    :param interface:       –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–∑–ª–∞ —Å–µ—Ç–∏
    :param status:          "up": –ø–æ–¥–Ω—è—Ç—å –ø–æ—Ä—Ç, "down": –ø–æ–ª–æ–∂–∏—Ç—å –ø–æ—Ä—Ç
    :return:                –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏
    """
    lprint("---- def set_port_status ----")

    try_to_save = 3     # 3 –ø–æ–ø—ã—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    try_to_down = 3     # 3 –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç
    try_to_up = 3       # 3 –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç

    with pexpect.spawn(f"telnet {current_ring[device]['ip']}") as telnet:
        try:
            if telnet.expect(["[Uu]ser", 'Unable to connect']):
                lprint("    Telnet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return 'telnet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            telnet.sendline(current_ring[device]["user"])
            lprint(f"    Login to {device}")
            telnet.expect("[Pp]ass")
            telnet.sendline(current_ring[device]["pass"])
            lprint(f"    Pass to {device}")
            match = telnet.expect([']', '>', '#', 'Failed to send authen-req'])
            if match == 3:
                lprint('    –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
                return '–Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'

            telnet.sendline('show version')
            version = ''
            while True:
                m = telnet.expect([r']$', '-More-', r'>$', r'#'])
                version += str(telnet.before.decode('utf-8'))
                if m == 1:
                    telnet.sendline(' ')
                else:
                    break
        except pexpect.exceptions.TIMEOUT:
            lprint("    –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ! (timeout)")
            return 'Exception: TIMEOUT'
        except pexpect.exceptions.EOF:
            lprint("    Exception: EOF")
            return 'Exception: EOF'

        # -----------------------------------------HUAWEI--------------------------------------------------------------
        if bool(findall(r'Unrecognized command', version)):
            try:
                if match == 1:
                    telnet.sendline("sys")
                    if telnet.expect([']', 'Unrecognized command']):
                        telnet.sendline('super')
                        lprint(f'    <{device}>super')
                        telnet.expect('[Pp]ass')
                        telnet.sendline('sevaccess')
                        telnet.expect('>')
                        telnet.sendline('sys')
                        telnet.expect(']')
                    lprint(f'    <{device}>system-view')
                interface = interface_normal_view(interface)
                telnet.sendline(f"int {interface}")
                lprint(f"    [{device}]interface {interface}")
                telnet.expect(f']')
                # -------------------Huawei - ADMIN DOWN-------------------
                if status == 'down':
                    # 3 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª–æ–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    while try_to_down > 0:
                        telnet.sendline('sh')
                        lprint(f'    [{device}-{interface}]shutdown')
                        telnet.expect(']')
                        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—Ç –ø–æ—Ä—Ç–∞
                        telnet.sendline(f'display current-configuration interface {interface}')
                        lprint('    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                        output = ''
                        while True:
                            match = telnet.expect([']', "  ---- More ----", pexpect.TIMEOUT])
                            output += str(telnet.before.decode('utf-8')).replace("[42D", '').strip()
                            if match == 1:
                                telnet.send(" ")
                                output += '\n'
                            else:
                                break
                        lprint(f'\n----------------------------------'
                               f'\n{output}'
                               f'\n----------------------------------')
                        if 'interface' in output and 'shutdown' in output:
                            lprint(f'    –ü–æ—Ä—Ç {interface} admin down!')
                            break
                        elif 'interface' not in output:
                            lprint('    –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                            telnet.sendline('sh')
                            telnet.expect(']')
                            telnet.sendline('quit')
                            telnet.expect(']')
                            telnet.sendline('quit')
                            telnet.expect(']')
                            telnet.sendline('quit')
                            lprint('    QUIT!')
                            return 'cant status'
                        try_to_down -= 1
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_down} –ø–æ–ø—ã—Ç–æ–∫)')
                    else:
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç! –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin down')
                        return 'cant set down'

                # --------------------Huawei - ADMIN UP---------------------
                elif status == 'up':
                    # 3 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    while try_to_up > 0:
                        telnet.sendline('undo sh')
                        lprint(f'    [{device}-{interface}]undo shutdown')
                        telnet.expect(']')
                        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—Ç –ø–æ—Ä—Ç–∞
                        telnet.sendline(f'display current-configuration int {interface}')
                        lprint('    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                        output = ''
                        while True:
                            match = telnet.expect([']', "  ---- More ----", pexpect.TIMEOUT])
                            output += str(telnet.before.decode('utf-8')).replace("[42D", '').strip()
                            if match == 1:
                                telnet.send(" ")
                                output += '\n'
                            else:
                                break
                        lprint(f'\n----------------------------------'
                               f'\n{output}'
                               f'\n----------------------------------')
                        if 'interface' in output and 'shutdown' not in output:    # –Ω–µ –≤ down
                            lprint(f'    –ü–æ—Ä—Ç {interface} admin up!')
                            break
                        elif 'interface' not in output:
                            lprint('    –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                            telnet.sendline('sh')
                            telnet.expect(']')
                            telnet.sendline('quit')
                            telnet.expect(']')
                            telnet.sendline('quit')
                            telnet.expect(']')
                            telnet.sendline('quit')
                            lprint('    QUIT!')
                            return 'cant status'
                        try_to_up -= 1
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_up} –ø–æ–ø—ã—Ç–æ–∫)')
                    else:
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç! –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin up')
                        return 'cant set up'
            except Exception as e:
                lprint(f"    Exeption: {e}")
                return 'Exception: cant set port status'
            # ----------------------Huawei - SAVE------------------------
            try:
                telnet.sendline('quit')
                telnet.expect(']')
                telnet.sendline('quit')
                telnet.expect('>')
                # 3 –ø–æ–ø—ã—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                while try_to_save > 0:
                    telnet.sendline('save')
                    lprint(f'    <{device}>save')
                    telnet.expect('[Y/N]')
                    telnet.sendline('Y')
                    telnet.sendline('\n')
                    if not telnet.expect([' successfully', '>']):
                        lprint('    configuration saved!')
                        telnet.sendline('quit')
                        lprint('    QUIT\n')
                        return 'DONE'
                    else:
                        lprint(f'    –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å! –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_save} –ø–æ–ø—ã—Ç–æ–∫')
                    try_to_save -= 1

                telnet.sendline('quit')
                lprint('    QUIT\n')
                return 'DONT SAVE'
            except Exception as e:
                lprint(f"    Exception: Don't saved! \nError: {e}")
                return 'Exception: DONT SAVE'

        # --------------------------------------CISCO - ELTEX----------------------------------------------------------
        elif bool(findall(r'Cisco IOS', version)) or bool(findall(r'Active-image: ', version)):
            try:
                if match == 1:
                    telnet.sendline("enable")
                    lprint(f'    {device}>enable')
                    telnet.expect('[Pp]assword')
                    telnet.sendline('sevaccess')
                    telnet.expect('#$')
                telnet.sendline('conf t')
                telnet.expect('#$')
                interface = interface_normal_view(interface)
                telnet.sendline(f"int {interface}")
                lprint(f"    {device}(config)#interface {interface}")
                telnet.expect('#$')
                # -------------------Cisco, Eltex - ADMIN DOWN--------------------------
                if status == 'down':
                    # 3 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª–æ–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    while try_to_down > 0:
                        telnet.sendline('shutdown')   # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
                        lprint(f'    {device}(config-if)#shutdown')
                        telnet.expect('#$')
                        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—Ç –ø–æ—Ä—Ç–∞
                        telnet.sendline(f'do show running-config int {interface}')
                        lprint('    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                        if try_to_down == 3 and bool(findall(r'Cisco IOS', version)):
                            telnet.expect('#$')
                        output = ''
                        while True:
                            match = telnet.expect(['#$', "--More--|More: <space>", pexpect.TIMEOUT])
                            output += str(telnet.before.decode('utf-8')).strip()
                            if match == 1:
                                telnet.send(" ")
                                output += '\n'
                            else:
                                break
                        lprint(f'\n----------------------------------'
                               f'\n{output}'
                               f'\n----------------------------------')
                        if 'interface' in output and 'shutdown' in output:
                            lprint(f'    –ü–æ—Ä—Ç {interface} admin down!')
                            break
                        elif 'interface' not in output:
                            lprint('    –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                            telnet.sendline('no shutdown')
                            lprint(f'    {device}(config-if)#no shutdown')
                            telnet.expect('#$')
                            telnet.sendline('exit')
                            telnet.expect('#$')
                            telnet.sendline('exit')
                            telnet.expect('#$')
                            telnet.sendline('exit')
                            lprint('    EXIT')
                            return 'cant status'
                        try_to_down -= 1
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_down} –ø–æ–ø—ã—Ç–æ–∫)')
                    else:
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç! –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin down')
                        telnet.sendline('exit')
                        telnet.expect('#$')
                        telnet.sendline('exit')
                        telnet.expect('#$')
                        telnet.sendline('exit')
                        lprint('    EXIT')
                        return 'cant set down'

                # ---------------------Cisco, Eltex - ADMIN UP----------------------------
                elif status == 'up':
                    # 3 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    while try_to_up > 0:
                        telnet.sendline('no shutdown')    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
                        lprint(f'    {device}(config-if)#no shutdown')
                        telnet.expect('#$')
                        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—Ç –ø–æ—Ä—Ç–∞
                        telnet.sendline(f'do show running-config int {interface}')
                        lprint('    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                        if try_to_up == 3 and bool(findall(r'Cisco IOS', version)):
                            telnet.expect('#$')
                        output = ''
                        while True:
                            match = telnet.expect(['#$', "--More--|More: <space>", pexpect.TIMEOUT])
                            output += str(telnet.before.decode('utf-8')).strip()
                            if match == 1:
                                telnet.send(" ")
                                output += '\n'
                            else:
                                break
                        lprint(f'\n----------------------------------'
                               f'\n{output}'
                               f'\n----------------------------------')
                        if 'interface' in output and 'shutdown' not in output:
                            lprint(f'    –ü–æ—Ä—Ç {interface} admin up!')
                            break
                        elif 'interface' not in output:
                            lprint('    –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞\n')
                            telnet.sendline('shutdown')
                            lprint(f'    {device}(config-if)#shutdown')
                            telnet.expect('#$')
                            telnet.sendline('exit')
                            telnet.expect('#$')
                            telnet.sendline('exit')
                            telnet.expect('#$')
                            telnet.sendline('exit')
                            lprint('    EXIT')
                            return 'cant status'
                        try_to_up -= 1
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_up} –ø–æ–ø—ã—Ç–æ–∫)')
                    else:
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç! –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin down')
                        telnet.sendline('exit')
                        telnet.expect('#$')
                        telnet.sendline('exit')
                        telnet.expect('#$')
                        telnet.sendline('exit')
                        lprint('    EXIT')
                        return 'cant set down'
            except Exception as e:
                lprint(f"    Exeption: {e}")
                return 'Exception: cant set port status'
            # ---------------------------Cisco, Eltex - SAVE------------------------------
            try:
                # telnet.expect('#')
                telnet.sendline('exit')
                lprint(f"    {device}(config-if)#exit")
                telnet.expect('#$')
                telnet.sendline('exit')
                lprint(f"    {device}(config)#exit")
                telnet.expect('#$')
                # 3 –ø–æ–ø—ã—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
                # –ï—Å–ª–∏ Cisco
                if bool(findall(r'Cisco IOS', version)):
                    while try_to_save > 0:
                        telnet.sendline('write')
                        lprint(f"    {device}#write")
                        telnet.expect('Building')
                        if telnet.expect(['OK', '#$']) == 0:
                            lprint("    Saved!")
                            telnet.sendline('exit')
                            lprint('    QUIT\n')
                            return 'DONE'
                        else:
                            try_to_save -= 1
                            lprint(f'    –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å! –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_save} –ø–æ–ø—ã—Ç–æ–∫)')
                    telnet.sendline('exit')
                    lprint('    QUIT\n')
                    return 'DONT SAVE'
                # –ï—Å–ª–∏ Eltex
                if bool(findall(r'Active-image: ', version)):
                    while try_to_save > 0:
                        telnet.sendline('write')
                        lprint(f"    {device}#write")
                        telnet.expect('Overwrite file')
                        telnet.sendline('Y')
                        telnet.expect('Y')
                        if telnet.expect(['succeeded', '#$']) == 0:
                            lprint("    Saved!")
                            telnet.sendline('exit')
                            lprint('    QUIT\n')
                            return 'DONE'
                        else:
                            try_to_save -= 1
                            lprint(f'    –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å! –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_save} –ø–æ–ø—ã—Ç–æ–∫)')
                    telnet.sendline('exit')
                    lprint('    QUIT\n')
                    return 'DONT SAVE'
            except Exception as e:
                lprint(f"    Exception: Don't saved! \nError: {e}")
                return 'Exception: DONT SAVE'

        # ------------------------------------------D-LINK-------------------------------------------------------------
        elif bool(findall(r'Next possible completions:', version)):
            try:
                telnet.sendline('enable admin')
                if not telnet.expect(["[Pp]ass", "You already have the admin"]):
                    telnet.sendline('sevaccess')
                    telnet.expect('#')
                interface = interface_normal_view(interface)
                # -------------------------D-Link - ADMIN DOWN----------------------------
                if status == 'down':
                    # 3 –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç
                    while try_to_down > 0:
                        telnet.sendline(f'config ports {interface} medium_type fiber state disable')
                        lprint(f'    {device}#config ports {interface} medium_type fiber state disable')
                        telnet.sendline(f'config ports {interface} medium_type copper state disable')
                        lprint(f'    {device}#config ports {interface} medium_type copper state disable')
                        telnet.expect('#')
                        telnet.sendline('disable clipaging')
                        telnet.expect('#')
                        telnet.sendline("show ports des")
                        lprint('    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                        lprint(f'    {device}#show ports description')
                        telnet.expect('#')
                        telnet.sendline('\n')
                        telnet.expect('#')
                        output = telnet.before.decode('utf-8')
                        with open(f'{root_dir}/templates/int_des_d-link.template', 'r') as template_file:
                            int_des_ = textfsm.TextFSM(template_file)
                            result = int_des_.ParseText(output)  # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç—É—Å–∞, –ª–∏–±–æ –µ–≥–æ —Å–∞–º–æ–≥–æ
                        if not result or not [x[1] for x in result if interface_normal_view(x[0]) == interface]:
                            lprint('    –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—Ç –≤ –ø—Ä–µ–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            telnet.sendline(f'config ports {interface} medium_type fiber state enable')
                            lprint(f'    {device}#config ports {interface} medium_type fiber state enable')
                            telnet.sendline(f'config ports {interface} medium_type copper state enable')
                            lprint(f'    {device}#config ports {interface} medium_type copper state enable')
                            telnet.expect('#')
                            telnet.sendline('logout')
                            lprint('    LOGOUT!')
                            return 'cant status'
                        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
                        for line in result:
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –∏ –æ–Ω Disabled (admin down)
                            if interface_normal_view(line[0]) == interface and line[1] == 'Disabled':
                                lprint(f'    –ü–æ—Ä—Ç {interface} admin down!')
                                break
                        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –ù–ï Enabled
                        else:
                            try_to_down -= 1
                            lprint(f'    –ü–æ—Ä—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_down} –ø–æ–ø—ã—Ç–æ–∫)')
                            continue

                        break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –∏ –æ–Ω Enabled
                    else:
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç! –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin down')
                        telnet.sendline('logout')
                        lprint('    LOGOUT!')
                        return 'cant set down'
                # -------------------------D-Link - ADMIN UP------------------------------
                elif status == 'up':
                    # 3 –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç
                    while try_to_up > 0:
                        telnet.sendline(f'config ports {interface} medium_type fiber state enable')
                        lprint(f'    {device}#config ports {interface} medium_type fiber state enable')
                        telnet.sendline(f'config ports {interface} medium_type copper state enable')
                        lprint(f'    {device}#config ports {interface} medium_type copper state enable')
                        telnet.expect('#')
                        telnet.sendline('disable clipaging')
                        telnet.expect('#')
                        lprint('    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                        telnet.sendline("show ports des")
                        lprint(f'    {device}#show ports description')
                        telnet.expect('#')
                        telnet.sendline('\n')
                        telnet.expect('#')
                        output = telnet.before.decode('utf-8')
                        with open(f'{root_dir}/templates/int_des_d-link.template', 'r') as template_file:
                            int_des_ = textfsm.TextFSM(template_file)
                            result = int_des_.ParseText(output)     # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç—É—Å–∞, –ª–∏–±–æ –µ–≥–æ —Å–∞–º–æ–≥–æ
                        if not result or not [x[1] for x in result if interface_normal_view(x[0]) == interface]:
                            lprint('    –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—Ç –≤ –ø—Ä–µ–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            telnet.sendline(f'config ports {interface} medium_type fiber state disable')
                            lprint(f'    {device}#config ports {interface} medium_type fiber state disable')
                            telnet.sendline(f'config ports {interface} medium_type copper state disable')
                            lprint(f'    {device}#config ports {interface} medium_type copper state disable')
                            telnet.expect('#$')
                            telnet.sendline('logout')
                            lprint('    LOGOUT!')
                            return 'cant status'
                        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
                        for line in result:
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –∏ –æ–Ω Enabled (admin up)
                            if interface_normal_view(line[0]) == interface and line[1] == 'Enabled':
                                lprint(f'    –ü–æ—Ä—Ç {interface} admin up!')
                                break
                        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –ù–ï Enabled
                        else:
                            try_to_up -= 1
                            lprint(f'    –ü–æ—Ä—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_up} –ø–æ–ø—ã—Ç–æ–∫)')
                            continue

                        break   # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –∏ –æ–Ω Enabled
                    else:
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç! –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin up')
                        telnet.sendline('logout')
                        lprint('    LOGOUT!')
                        return 'cant set up'
            except Exception as e:
                lprint(f"    Ex—Åeption: {e}")
                return 'Exception: cant set port status'
            # -------------------------D-Link - SAVE----------------------------------
            try:
                while try_to_save > 0:
                    telnet.sendline('save')
                    lprint(f'    {device}#save')
                    telnet.expect('Command: save')
                    m = telnet.expect(['[Ss]uccess|Done', '#'])
                    if m == 0:
                        lprint("    Saved!")
                        telnet.sendline('logout')
                        lprint('    LOGOUT!\n')
                        return 'DONE'
                    else:
                        try_to_save -= 1
                        lprint(f'    –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å! –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_save} –ø–æ–ø—ã—Ç–æ–∫)')
                else:
                    lprint("    Don't saved!")
                    telnet.sendline('logout')
                    lprint('    LOGOUT!\n')
                    return 'DONT SAVE'
            except Exception as e:
                lprint(f"    Don't saved! \nError: {e}")
                return 'Exception: DONT SAVE'

        # -------------------------------------Alcatel - Linksys-------------------------------------------------------
        elif bool(findall(r'SW version', version)):
            try:
                telnet.sendline('conf')
                lprint(f'    {device}# configure')
                telnet.expect('# ')
                telnet.sendline(f'interface ethernet {interface}')
                lprint(f'    {device}(config)# interface ethernet {interface}')
                telnet.expect('# ')
                # ------------------Alcatel, Linksys - ADMIN DOWN---------------------
                if status == 'down':
                    while try_to_down > 0:
                        telnet.sendline('sh')
                        lprint(f'    {device}(config-if)# shutdown')
                        telnet.expect('# ')
                        telnet.sendline('do show interfaces configuration')
                        lprint('    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                        telnet.expect('Port')
                        port_state = ''
                        while True:
                            match = telnet.expect(['More: <space>', '# ', pexpect.TIMEOUT])
                            port_state += str(telnet.before.decode('utf-8')).strip()
                            if match == 0:
                                telnet.sendline(' ')
                            else:
                                break
                        with open(f'{root_dir}/templates/int_des_alcatel_linksys.template', 'r') as template_file:
                            int_des_ = textfsm.TextFSM(template_file)
                            result = int_des_.ParseText(port_state)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç—É—Å–∞, –ª–∏–±–æ –µ–≥–æ —Å–∞–º–æ–≥–æ
                        if not result or not [x[1] for x in result if x[0] == interface]:
                            lprint('    –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—Ç –≤ –ø—Ä–µ–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            lprint('    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—Ç –≤ –ø—Ä–µ–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
                            telnet.sendline('no sh')
                            lprint(f'    {device}(config-if)# no shutdown')
                            telnet.sendline('exit')
                            telnet.sendline('exit')
                            telnet.sendline('exit')
                            lprint('    EXIT!')
                            return 'cant status'
                        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
                        for line in result:
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –∏ –æ–Ω admin down
                            if line[0] == interface and line[1] == 'Down':
                                lprint(f'    –ü–æ—Ä—Ç {interface} admin down!')
                                break
                        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –ù–ï admin down
                        else:
                            try_to_down -= 1
                            lprint(f'    –ü–æ—Ä—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_down} –ø–æ–ø—ã—Ç–æ–∫)')
                            continue

                        break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –∏ –æ–Ω admin down
                    else:
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç! –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin down')
                        telnet.sendline('exit')
                        telnet.sendline('exit')
                        telnet.sendline('exit')
                        lprint('    EXIT!')
                        return 'cant set down'
                # ------------------Alcatel, Linksys - ADMIN UP-----------------------
                elif status == 'up':
                    while try_to_up > 0:
                        telnet.sendline('no sh')
                        lprint(f'    {device}(config-if)# no shutdown')
                        telnet.expect('# ')
                        telnet.sendline('do show interfaces configuration')
                        lprint('    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                        telnet.expect('Port')
                        port_state = ''
                        while True:
                            match = telnet.expect(['More: <space>', '# ', pexpect.TIMEOUT])
                            port_state += str(telnet.before.decode('utf-8')).strip()
                            if match == 0:
                                telnet.sendline(' ')
                            else:
                                break
                        with open(f'{root_dir}/templates/int_des_alcatel_linksys.template', 'r') as template_file:
                            int_des_ = textfsm.TextFSM(template_file)
                            result = int_des_.ParseText(port_state)  # –ò—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç—É—Å–∞, –ª–∏–±–æ –µ–≥–æ —Å–∞–º–æ–≥–æ
                        if not result or not [x[1] for x in result if x[0] == interface]:
                            lprint('    –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞')
                            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—Ç –≤ –ø—Ä–µ–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            lprint('    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—Ç –≤ –ø—Ä–µ–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
                            telnet.sendline('sh')
                            lprint(f'    {device}(config-if)# shutdown')
                            telnet.sendline('exit')
                            telnet.sendline('exit')
                            telnet.sendline('exit')
                            lprint('    EXIT!')
                            return 'cant status'
                        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
                        for line in result:
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –∏ –æ–Ω admin up
                            if line[0] == interface and line[1] == 'Up':
                                lprint(f'    –ü–æ—Ä—Ç {interface} admin up!')
                                break
                        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –ù–ï admin up
                        else:
                            try_to_up -= 1
                            lprint(f'    –ü–æ—Ä—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ (–æ—Å—Ç–∞–ª–æ—Å—å {try_to_up} –ø–æ–ø—ã—Ç–æ–∫)')
                            continue

                        break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –ø–æ—Ä—Ç –∏ –æ–Ω admin down
                    else:
                        lprint(f'    –ü–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç! –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin up')
                        telnet.sendline('exit')
                        telnet.sendline('exit')
                        telnet.sendline('exit')
                        lprint('    EXIT!')
                        return 'cant set up'
            except Exception as e:
                lprint(f"    Exeption: {e}")
                return 'Exception: cant set port status'
            # ------------------------Alcatel, Linksys - SAVE-------------------------
            try:
                telnet.sendline('exit')
                telnet.expect('# ')
                telnet.sendline('exit')
                telnet.expect('# ')
                telnet.sendline('write')
                lprint(f'    {device}# write')
                telnet.expect('write')
                m = telnet.expect(['Unrecognized command', 'succeeded', '# '])
                if m == 0:
                    telnet.sendline('copy running-config startup-config')
                    lprint(f'    {device}# copy running-config startup-config')
                    telnet.expect('Overwrite file')
                    telnet.sendline('Yes')
                    m = telnet.expect(['!@#', 'succeeded', '# '])
                if m == 1:
                    lprint("    Saved!")
                    telnet.sendline('exit')
                    lprint('    EXIT!\n')
                    return 'DONE'
                else:
                    lprint('    Dont saved!')
                    telnet.sendline('exit')
                    lprint('    EXIT!\n')
                    return 'DONT SAVE'
            except Exception as e:
                lprint(f"    Don't saved! \nError: {e}")
                return 'Exception: DONT SAVE'

        # Edge-Core
        elif bool(findall(r'Hardware version', version)):
            lprint("    Edge-Core")

        # Zyxel
        elif bool(findall(r'ZyNOS', version)):
            lprint("    Zyxel")

        # ZTE
        elif bool(findall(r' ZTE Corporation:', version)):
            lprint("    ZTE")

        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤–µ–Ω–¥–æ—Ä, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
        telnet.sendline('exit')
        return False


def find_port_by_desc(ring: dict, main_name: str, target_name: str):
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å description –∏–º–µ—é—â–∏–º –≤ —Å–µ–±–µ –∏–º—è –¥—Ä—É–≥–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è \n
    :param ring:        –ö–æ–ª—å—Ü–æ
    :param main_name:   –£–∑–µ–ª —Å–µ—Ç–∏, –≥–¥–µ –∏—â–µ–º
    :param target_name: –£–∑–µ–ª —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ–º
    :return:            –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    """
    lprint("---- def find_port_by_desc ----")
    result = interfaces(ring, main_name)
    for line in result:
        if bool(findall(target_name, line[2])):  # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –≤ description —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è "target_name"
            return line[0]    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å


def ping_from_device(device: str, ring: dict):
    """
    –ó–∞—Ö–æ–¥–∏–º –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ telnet –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    :param ring"    –ö–æ–ª—å—Ü–æ
    :param device:          –ò–º—è —É–∑–ª–∞ —Å–µ—Ç–∏, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
    :return:                –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1, –Ω–µ—É–¥–∞—á–∏ - 0
    """
    with pexpect.spawn(f"telnet {ring[device]['ip']}") as telnet:
        try:
            if telnet.expect(["[Uu]ser", 'Unable to connect']):
                lprint("    Telnet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                return False
            telnet.sendline(ring[device]["user"])
            lprint(f"    Login to {device}")
            telnet.expect("[Pp]ass")
            telnet.sendline(ring[device]["pass"])
            lprint(f"    Pass to {device}")
            match = telnet.expect([']', '>', '#', 'Failed to send authen-req'])
            if match == 3:
                lprint('    –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
                return False
            telnet.sendline('show version')
            version = ''
            while True:
                m = telnet.expect([']', '-More-', '>', '#'])
                version += str(telnet.before.decode('utf-8'))
                if m == 1:
                    telnet.sendline(' ')
                else:
                    break

            devices_status = [(device, True)]
            lprint(f'–î–æ—Å—Ç—É–ø–Ω–æ   {device}')
            try:
                telnet.sendline(f'ping {ring[device]["ip"]}')
                telnet.sendcontrol('c')
                telnet.expect([']', '>', '#'])
            except pexpect.exceptions.TIMEOUT:
                telnet.sendcontrol('c')
                telnet.expect([']', '>', '#'])
            for dev in ring:
                if device != dev:
                    try:
                        telnet.sendline(f'ping {ring[dev]["ip"]}')

                        # Huawei
                        if bool(findall(r'Error: Unrecognized command', version)):
                            match = telnet.expect(['Request time out', 'Error', 'Reply from'])
                        # Cisco
                        elif bool(findall(r'Cisco IOS', version)):
                            match = telnet.expect(['is 0 percent', 'Unrecognized host', 'is 100 percent'])
                        # D-Link
                        elif bool(findall(r'Next possible completions:', version)):
                            match = telnet.expect(['Request timed out', 'Command: ping', 'Reply from'])
                        # Alcatel, Linksys
                        elif bool(findall(r'SW version', version)):
                            match = telnet.expect([' 0 packets received', 'Host not found', 'min/avg/max'])
                        # Eltex
                        elif bool(findall(r'Active-image: ', version)):
                            match = telnet.expect(['PING: timeout', 'Host not found', 'bytes from'])
                        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤–µ–Ω–¥–æ—Ä, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
                        else:
                            telnet.sendline('exit')
                            return False

                        if match < 2:
                            telnet.sendcontrol('c')
                            devices_status.append((dev, False))
                            lprint(f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ {dev}')
                        elif match == 2:
                            telnet.sendcontrol('c')
                            devices_status.append((dev, True))
                            lprint(f'–î–æ—Å—Ç—É–ø–Ω–æ   {dev}')
                        telnet.expect([']', '>', '#'])
                    except pexpect.exceptions.TIMEOUT:
                        devices_status.append((dev, False))
                        lprint(f'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ {dev} Exception: timeout')
                        telnet.sendcontrol('c')
                        telnet.expect([']', '>', '#'])

            # Huawei
            if bool(findall(r'Error: Unrecognized command', version)):
                telnet.sendline('quit')
            # Cisco
            elif bool(findall(r'Cisco IOS', version)):
                telnet.sendline('exit')
            # D-Link
            elif bool(findall(r'Next possible completions:', version)):
                telnet.sendline('logout')
            # Alcatel, Linksys
            elif bool(findall(r'SW version', version)):
                telnet.sendline('exit')
            # Eltex
            elif bool(findall(r'Active-image: ', version)):
                telnet.sendline('exit')

            return devices_status           # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫

        except pexpect.exceptions.TIMEOUT:
            lprint("    –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ! (timeout)")
            return False


def ping_devices(ring: dict):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –∏–∑ —É–∑–ª–æ–≤ —Å–µ—Ç–∏ –≤ –∫–æ–ª—å—Ü–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ "ping" \n
    :param ring: –ö–æ–ª—å—Ü–æ
    :return: –î–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: –∏–º—è —É–∑–ª–∞ –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å "True" - ping —É—Å–ø–µ—à–µ–Ω, "False" - –Ω–µ—Ç
    """
    status = []
    lprint("---- –ü–∏–Ω–≥—É–µ–º –≤—Å–µ —É–∑–ª—ã —Å–µ—Ç–∏ ----")

    def ping(ip, device):
        result = subprocess.run(['ping', '-c', '3', '-n', ip], stdout=subprocess.DEVNULL)
        if not result.returncode:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: 0 - –¥–æ—Å—Ç—É–ø–µ–Ω, 1 –∏ 2 - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            status.append((device, True))
            lprint(f"    ‚úÖ {device}")
        else:
            status.append((device, False))
            lprint(f"    ‚ùå {device}")

    with ThreadPoolExecutor(max_workers=10) as executor:    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
        for device in ring:
            executor.submit(ping, ring[device]['ip'], device)   # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω—Ü–∏—é ping –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

    return status
